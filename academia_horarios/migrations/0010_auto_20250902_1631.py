# Generated by Django 5.0.7 on 2025-09-02 19:31

from django.db import migrations
import datetime

# Definición de la estructura de la grilla, similar a como estaba en el JS.
GRILLAS = {
    "manana": {
        "turno_slug": "manana",
        "dias": range(0, 5), # Lunes a Viernes
        "start": "07:45", "end": "12:45", "breaks": [["09:05","09:15"], ["10:35","10:45"]]
    },
    "tarde": {
        "turno_slug": "tarde",
        "dias": range(0, 5),
        "start": "13:00", "end": "18:00", "breaks": [["14:20","14:30"], ["15:50","16:00"]]
    },
    "vespertino": {
        "turno_slug": "vespertino",
        "dias": range(0, 5),
        "start": "18:10", "end": "23:10", "breaks": [["19:30","19:40"], ["21:00","21:10"]]
    },
    "sabado": {
        "turno_slug": None, # Sábado no es un turno
        "dias": [5], # Solo Sábado
        "start": "09:00", "end": "14:00", "breaks": [["10:20","10:30"], ["11:50","12:00"]]
    },
}

BLOCK_MIN = 40

def to_minutes(time_str):
    h, m = map(int, time_str.split(':'))
    return h * 60 + m

def to_time(minutes):
    h = minutes // 60
    m = minutes % 60
    return datetime.time(h, m)

def populate_bloques(apps, schema_editor):
    TurnoModel = apps.get_model('academia_horarios', 'TurnoModel')
    Bloque = apps.get_model('academia_horarios', 'Bloque')

    # Limpiar bloques existentes para que el script sea re-ejecutable
    Bloque.objects.all().delete()

    for config in GRILLAS.values():
        turno_obj = None
        if config['turno_slug']:
            try:
                turno_obj = TurnoModel.objects.get(slug=config['turno_slug'])
            except TurnoModel.DoesNotExist:
                continue # Si el turno no existe, no podemos crear sus bloques

        start_min = to_minutes(config['start'])
        end_min = to_minutes(config['end'])
        
        # Convertir recreos a minutos
        breaks_min = sorted([[to_minutes(s), to_minutes(e)] for s, e in config['breaks']])
        
        slots = []
        current_min = start_min

        # Generar bloques de clase hasta el primer recreo
        break_starts = [b[0] for b in breaks_min]
        next_break_start = break_starts[0] if break_starts else end_min
        
        # Generar todos los bloques (clase y recreos)
        all_blocks = []
        processed_until = start_min

        # Añadir bloques de clase y recreos en orden
        for break_start, break_end in breaks_min:
            # Bloques de clase antes del recreo
            while processed_until + BLOCK_MIN <= break_start:
                all_blocks.append((processed_until, processed_until + BLOCK_MIN, False))
                processed_until += BLOCK_MIN
            # El recreo
            all_blocks.append((break_start, break_end, True))
            processed_until = break_end
        
        # Bloques de clase después del último recreo
        while processed_until + BLOCK_MIN <= end_min:
            all_blocks.append((processed_until, processed_until + BLOCK_MIN, False))
            processed_until += BLOCK_MIN

        # Crear los objetos en la base de datos
        for dia_idx in config['dias']:
            for orden_idx, (start_slot, end_slot, es_recreo) in enumerate(all_blocks):
                Bloque.objects.create(
                    turno=turno_obj,
                    dia_semana=dia_idx,
                    orden=orden_idx,
                    inicio=to_time(start_slot),
                    fin=to_time(end_slot),
                    es_recreo=es_recreo
                )

def reverse_populate_bloques(apps, schema_editor):
    Bloque = apps.get_model('academia_horarios', 'Bloque')
    Bloque.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('academia_horarios', '0009_rename_academia_ho_materia_d_12345_academia_ho_materia_4c2a3e_idx_and_more'),
    ]

    operations = [
        migrations.RunPython(populate_bloques, reverse_code=reverse_populate_bloques),
    ]