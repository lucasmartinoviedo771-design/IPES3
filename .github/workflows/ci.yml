name: CI (Lint, Check & Tests)

on:
  push:
    branches: [ main, dev ]
  pull_request:

jobs:
  test_and_lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    env:
      DJANGO_SETTINGS_MODULE: academia_project.settings
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      USE_SQLITE_FOR_TESTS: "1"
      DJANGO_DEBUG: "1"
      TIME_ZONE: "UTC"
      DJANGO_ALLOWED_HOSTS: "localhost,127.0.0.1,testserver"
      DJANGO_CSRF_TRUSTED_ORIGINS: "http://localhost,http://127.0.0.1"

    steps:
      - name: Checkout (Revisar c칩digo)
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Instalar dependencias con uv
        run: |
          uv sync --locked || uv sync
          uv add --dev pytest pytest-django pytest-cov ruff tzdata
          uv sync

      - name: Lint con Ruff (no bloqueante)
        run: uv run ruff check . || true

      - name: Detectar ruta de manage.py
        id: managepy
        run: |
          if [ -f manage.py ]; then
            echo "path=manage.py" >> "$GITHUB_OUTPUT"
          elif [ -f academia_project/manage.py ]; then
            echo "path=academia_project/manage.py" >> "$GITHUB_OUTPUT"
          else
            echo "ERROR: No se encontr칩 manage.py" >&2
            exit 1
          fi

      - name: Django Check (configuraci칩n b치sica)
        run: uv run python "${{ steps.managepy.outputs.path }}" check

      - name: Django Check --deploy (bloqueante)
        env:
          DJANGO_DEBUG: "0"
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_ALLOWED_HOSTS: "example.com"
          DJANGO_CSRF_TRUSTED_ORIGINS: "https://example.com"
          SECURE_SSL_REDIRECT: "1"
          USE_PROXY_SSL_HEADER: "1"
        run: uv run python "${{ steps.managepy.outputs.path }}" check --deploy --fail-level WARNING

      - name: Verificar que no falten migraciones
        run: uv run python "${{ steps.managepy.outputs.path }}" makemigrations --check --dry-run

      - name: Aplicar migraciones en SQLite
        run: uv run python "${{ steps.managepy.outputs.path }}" migrate --noinput

      - name: Tests + coverage (XML/HTML)
        env:
          RUN_STRICT_HORARIOS_TESTS: "0"
        run: |
          uv run pytest \
            --cov=academia_core --cov=academia_horarios --cov=ui \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --cov-report=term-missing -q

      - name: Publicar cobertura HTML como artefacto
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov
          if-no-files-found: error

      - name: Publicar cobertura XML como artefacto
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: error
