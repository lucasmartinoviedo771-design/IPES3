name: Tests & Coverage

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main, dev, chore/** ]
  workflow_dispatch:

jobs:
  tests:
    name: tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    env:
      DJANGO_SETTINGS_MODULE: academia_project.settings_test
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      USE_SQLITE_FOR_TESTS: "1"
      DJANGO_DEBUG: "1"
      TIME_ZONE: "UTC"
      DJANGO_ALLOWED_HOSTS: "localhost,127.0.0.1,testserver"
      DJANGO_CSRF_TRUSTED_ORIGINS: "http://localhost,http://127.0.0.1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install deps
        run: |
          uv sync --locked || uv sync

      - name: Django check
        run: uv run python manage.py check

      - name: Apply migrations (SQLite)
        run: uv run python manage.py migrate --noinput

      # ðŸ§ª Ejecutar tests UNA sola vez, ya con cobertura y reportes
      - name: Run tests + coverage
        env:
          RUN_STRICT_HORARIOS_TESTS: "0"
        run: uv run pytest --cov --cov-report=xml --cov-report=html -q

      # ðŸ‘‡ Publicar artefactos aunque los tests hayan fallado (Ãºtil para inspecciÃ³n)
      - name: Upload coverage.xml
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: warn

      - name: Upload htmlcov
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov
          if-no-files-found: warn
